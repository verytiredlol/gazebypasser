--[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]

if not game:IsLoaded() then
    game.IsLoaded:Wait()
end


    function makeMessage(message)
    pcall(function()
        msg = tostring(message)
        
        if game:GetService("TextChatService").TextChannels:FindFirstChild("RBXGeneral") then
            game:GetService("TextChatService").TextChannels:FindFirstChild("RBXGeneral"):DisplaySystemMessage(msg)
            else
        game:GetService("StarterGui"):SetCore(
            "ChatMakeSystemMessage",
            {
                Text = msg,
                Color = Color3.fromRGB(255, 89, 98),
                Font = Enum.Font.GothamMedium,
                FontSize = 16
            }
        )
        end
    end)
    end
    
    
    local function Smooth(gui)
    if not gui:IsA("GuiObject") then
        warn("The provided object is not a valid GUI object.")
        return
    end
    
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(1.5, 0)
    uiCorner.Parent = gui
    
    return uiCorner
end
    
    
local guiName = "GazeGayUI5"
local coreGay = game:GetService("CoreGui")


if not coreGay:FindFirstChild(guiName) then
   
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = guiName  

    
    screenGui.Parent = coreGay

    makeMessage("â€¢   Gaze bypass V5 loaded.")
else
   
    makeMessage("â€¢   Gaze bypass V5 is already executed..")
    return
end


local TweenService = game:GetService("TweenService")

local gui = Instance.new("ScreenGui")
local GazerMain = Instance.new("Frame")
local GazerTitle = Instance.new("TextLabel")
local GazerTitle2 = Instance.new("TextLabel")
local TextBax = Instance.new("TextBox")
local chat = Instance.new("TextButton")
local UICornerMain = Instance.new("UICorner")
local UICornerTitle = Instance.new("UICorner")

local UICornerTextBax = Instance.new("UICorner")
local UICornerChat = Instance.new("UICorner")

local toggleScrollFrameBtn = Instance.new("TextButton") 

local scrollFrame = Instance.new("ScrollingFrame") 
local UICornerToggleBtn = Instance.new("UICorner")
local UICornerClear = Instance.new("UICorner")
local UICornerUndo = Instance.new("UICorner")

gui.Name = "GazerAlteredGui"
gui.Parent = cloneref(game:GetService("CoreGui")) or game:GetService("CoreGui") 


GazerMain.Size = UDim2.new(0.5, 0, 0.5, 0)
GazerMain.Position = UDim2.new(0.25, 0, 0.25, 0)
GazerMain.BackgroundColor3 = Color3.fromRGB(255, 238, 238)
GazerMain.BorderColor3 = Color3.fromRGB(255, 89, 98)
GazerMain.BorderSizePixel = 1
GazerMain.Active = true
GazerMain.Draggable = true
GazerMain.Parent = gui

Smooth(GazerMain)

GazerTitle.Size = UDim2.new(0.85, 0, 0.2, 0) 
GazerTitle.Position = UDim2.new(0, 0, 0, 0)
GazerTitle.BackgroundColor3 = Color3.fromRGB(255, 238, 238)
GazerTitle.BorderColor3 = Color3.fromRGB(255, 89, 98)
GazerTitle.BorderSizePixel = 1
GazerTitle.BackgroundTransparency = 1
GazerTitle.Text = "Gaze Bypass"
GazerTitle.TextSize = 30
GazerTitle.TextColor3 = Color3.fromRGB(255, 200, 200)
GazerTitle.Font = Enum.Font.GothamBold
GazerTitle.Parent = GazerMain


GazerTitle2.Size = UDim2.new(0.5, 0, 0.1, 0)
GazerTitle2.Position = UDim2.new(1.1, 0, 0, 0)
GazerTitle2.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
GazerTitle2.BorderColor3 = Color3.fromRGB(60, 60, 60)
GazerTitle2.BorderSizePixel = 1
GazerTitle2.Text = "Examples"
GazerTitle2.TextSize = 20
GazerTitle2.TextColor3 = Color3.new(1, 1, 1)
GazerTitle2.Font = Enum.Font.GothamBold
GazerTitle2.Parent = GazerMain


UICornerTitle.CornerRadius = UDim.new(0, 10)
UICornerTitle.Parent = GazerTitle


-- Replace the ImageLabel with a TextLabel for the icon
local GazerIcon = Instance.new("TextLabel")
GazerIcon.Size = UDim2.new(0.15, 0, 0.25, 0)
GazerIcon.Position = UDim2.new(0.65, 0, 0, 0)
GazerIcon.BackgroundTransparency = 1
GazerIcon.Text = "V5"
GazerIcon.TextSize = 30
GazerIcon.TextColor3 = Color3.fromRGB(255, 89, 98)
GazerIcon.Font = Enum.Font.GothamBold
GazerIcon.Parent = GazerMain

-- Add a squish animation to the TextLabel
local TweenService = game:GetService("TweenService")
local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, -1, true) -- Loop the animation

local squishGoal = {Size = UDim2.new(0.15, 0, 0.2, 0)} -- Reduce height for squish effect
local normalGoal = {Size = UDim2.new(0.15, 0, 0.25, 0)} -- Return to original size

local squishTween = TweenService:Create(GazerIcon, tweenInfo, squishGoal)
local normalTween = TweenService:Create(GazerIcon, tweenInfo, normalGoal)

-- Start the squish animation
squishTween:Play()
squishTween.Completed:Connect(function()
    normalTween:Play()
end)

TextBax.Size = UDim2.new(0.8, 0, 0.2, 0)
TextBax.Position = UDim2.new(0.1, 0, 0.3, 0)
TextBax.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
TextBax.BorderColor3 = Color3.fromRGB(70, 70, 70)
TextBax.BorderSizePixel = 1
TextBax.PlaceholderText = "(Enter Message)"
TextBax.TextColor3 = Color3.new(1, 1, 1)
TextBax.Font = Enum.Font.Code
TextBax.ClearTextOnFocus = true
TextBax.Text = ""
TextBax.TextSize = 18
TextBax.Parent = GazerMain

Smooth(TextBax)

-- Toggle ScrollFrame Button
toggleScrollFrameBtn.Size = UDim2.new(0.2, 0, 0.2, 0)
toggleScrollFrameBtn.Position = UDim2.new(0.70, 0, 0.5, 0)
toggleScrollFrameBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
toggleScrollFrameBtn.BorderColor3 = Color3.fromRGB(70, 70, 70)
toggleScrollFrameBtn.Text = "Examples"
toggleScrollFrameBtn.TextSize = 18
toggleScrollFrameBtn.TextColor3 = Color3.new(1, 1, 1)
toggleScrollFrameBtn.Font = Enum.Font.Code
toggleScrollFrameBtn.Parent = GazerMain


-- Adding rounded corners to Toggle Button
UICornerToggleBtn.CornerRadius = UDim.new(0, 10)
UICornerToggleBtn.Parent = toggleScrollFrameBtn


-- Scroll Frame
scrollFrame.Size = UDim2.new(0.5, 0, 0.9, 0)
scrollFrame.Position = UDim2.new(1.1, 0, 0.1, 0)
scrollFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
scrollFrame.BorderColor3 = Color3.fromRGB(60, 60, 60)
scrollFrame.BorderSizePixel = 1
scrollFrame.Visible = true -- Initially hidden
scrollFrame.Parent = GazerMain

Smooth(scrollFrame)

scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- We will adjust this as buttons are added
scrollFrame.ScrollBarThickness = 8



local TweenService = game:GetService("TweenService")


local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

local function tweenVisibility(frame, targetVisible)
    local targetTransparency = targetVisible and 0 or 1

    local tween = TweenService:Create(frame, tweenInfo, {BackgroundTransparency = targetTransparency})
    tween:Play()

    for _, child in pairs(frame:GetDescendants()) do
        if child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("TextBox") then
            local textTween = TweenService:Create(child, tweenInfo, {TextTransparency = targetTransparency})
            textTween:Play()
        elseif child:IsA("Frame") or child:IsA("ScrollingFrame") or child:IsA("ImageLabel") or child:IsA("ImageButton") then
            local childTween = TweenService:Create(child, tweenInfo, {BackgroundTransparency = targetTransparency})
            childTween:Play()

            -- Tween all text elements within nested frames
            for _, nestedChild in pairs(child:GetDescendants()) do
                if nestedChild:IsA("TextLabel") or nestedChild:IsA("TextButton") or nestedChild:IsA("TextBox") then
                    local nestedTextTween = TweenService:Create(nestedChild, tweenInfo, {TextTransparency = targetTransparency})
                    nestedTextTween:Play()
                end
            end
        end
    end

    if not targetVisible then
        tween.Completed:Connect(function()
            frame.Visible = false
        end)
    else
        frame.Visible = true
    end
end

toggleScrollFrameBtn.MouseButton1Click:Connect(function()
    tweenVisibility(scrollFrame, not scrollFrame.Visible)
    tweenVisibility(GazerTitle2, not GazerTitle2.Visible)
end)






local buttonCount = 0
local function example(text)
task.wait()
    buttonCount = buttonCount + 1

    local textButton = Instance.new("TextButton")
    textButton.Size = UDim2.new(1, -10, 0, 40) -- Full width of scroll frame, height of 40
    textButton.Position = UDim2.new(0, 5, 0, (buttonCount - 1) * 45) -- Space each button 45 pixels apart
    textButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    textButton.BorderColor3 = Color3.fromRGB(70, 70, 70)
    textButton.Text = text
    textButton.TextScaled = true -- Enable text scaling
    textButton.TextWrapped = true -- Wrap the text if needed
    textButton.TextSize = 18
    textButton.TextColor3 = Color3.new(1, 1, 1)
    textButton.Font = Enum.Font.Code
    textButton.Parent = scrollFrame

    
    textButton.MouseButton1Click:Connect(function()
        print(TextBax.Text)
        TextBax.Text = textButton.Text
        
    end)

    
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, buttonCount * 45)
end



    example("Gaze Bypass V5 is fucking awesome!")
example("https://www.youtube.com/@gazer_ha")
example("#GazeBypassAtTheFuckingBottom")
example("Fuck around and find out for yourself.")
example("Want some free Robux? Go to Xvideos.com for free Robux.")
example("I'm tired of all this shit.")
example("That was cuntacular ðŸ’¯.")
example("Stop being a cunt.")
example("Fuck this shit.")
example("Go fuck yourself.")
example("I want to kill myself...")
example("There's no cure for being a cunt.")
example("Fuck you.")
example("Fuck you | with love {â™¡}.")
example("1 nigga | 2 nigga | 3 nigga | oh damn.")
example("https://xvideos.com")
example("https://pornhub.com is awesome.")
example("I have a cute XHamster.")
example("https://nhentai.net")
example("https://nekopoi.care")
example("E621? Eugh, what the fuck?")
example("This shit is absolutely insane!")
    example("What the hell were you thinking?")
    example("You're such a dumbass.")
    example("i can't believe this bullshit.")
    example("This is a load of crap.")
    example("Get your head out of your ass.")
    example("You're driving me fucking crazy.")
    example("Quit acting like a little bitch.")
    example("This is some serious bullshit right here.")
    example("i don't give a flying fuck.")
    example("You think you're hot shit, huh?")
    example("What the fuck is going on?")
    example("This party is lit as fuck.")
    example("i'm so done with this crap.")
    example("Don't be a little shit.")
    example("You absolute legend, you crazy bastard.")
    example("Shut the fuck up already.")
    example("i'm not in the mood for your bullshit.")
    example("You're being a real pain in the ass.")
    example("This is fucking ridiculous.")
    example("Get your shit together.")
    example("You gotta be shitting me.")
    example("What the fuck is this nonsense?")
    example("You're a total piece of shit.")
    example("i'm so fucking tired of this drama.")
    example("Get your shit together, damn it.")
    example("Why the hell would you do that?")
    example("This is driving me absolutely nuts.")
    example("i can't deal with this crap anymore.")
    example("Seriously, what the hell were you thinking?")
    example("You are being a complete jackass.")
    example("This place is a fucking mess.")
    example("Don't test me, you moron.")
    example("i swear to god, this is fucking ridiculous.")
    example("You're such a fucking idiot.")
    example("Stop being such a whiny brat.")
    example("This is beyond fucking stupid.")
    example("You're asking for trouble, you know that?")
    example("Get the fuck out of my way.")
    example("What kind of bullshit is this?")
    example("iâ€™m done with your bullshit excuses.")
    example("You're really pushing my buttons here.")
    example("This is a complete fucking disaster.")
    example("Shit happens, but this is too much.")
    
    
    
   

    local time = os.date("*t") -- Gets the current time in table format
local hour = time.hour -- Extract the hour
local minute = time.min -- Extract the minute


    example("This Fuckers Executed At = " .. string.format("%02d:%02d", hour, minute))
local LocalizationS = game:GetService("LocalizationService")
local Player = game.Players.LocalPlayer

local countryMap = {
 ["BD"] = "Bangladesh",
 ["BE"] = "Belgium",
 ["BF"] = "Burkina Faso",
 ["BG"] = "Bulgaria",
 ["BA"] = "Bosnia and Herzegovina",
 ["BB"] = "Barbados",
 ["WF"] = "Wallis and Futuna",
 ["BL"] = "Saint Barthelemy",
 ["BM"] = "Bermuda",
 ["BN"] = "Brunei",
 ["BO"] = "Bolivia",
 ["BH"] = "Bahrain",
 ["BI"] = "Burundi",
 ["BJ"] = "Benin",
 ["BT"] = "Bhutan",
 ["JM"] = "Jamaica",
 ["BV"] = "Bouvet Island",
 ["BW"] = "Botswana",
 ["WS"] = "Samoa",
 ["BQ"] = "Bonaire, Saint Eustatius and Saba",
 ["BR"] = "Brazil",
 ["BS"] = "Bahamas",
 ["JE"] = "Jersey",
 ["BY"] = "Belarus",
 ["BZ"] = "Belize",
 ["RU"] = "Russia",
 ["RW"] = "Rwanda",
 ["RS"] = "Serbia",
 ["TL"] = "East Timor",
 ["RE"] = "Reunion",
 ["TM"] = "Turkmenistan",
 ["TJ"] = "Tajikistan",
 ["RO"] = "Romania",
 ["TK"] = "Tokelau",
 ["GW"] = "Guinea-Bissau",
 ["GU"] = "Guam",
 ["GT"] = "Guatemala",
 ["GS"] = "South Georgia and the South Sandwich Islands",
 ["GR"] = "Greece",
 ["GQ"] = "Equatorial Guinea",
 ["GP"] = "Guadeloupe",
 ["JP"] = "Japan",
 ["GY"] = "Guyana",
 ["GG"] = "Guernsey",
 ["GF"] = "French Guiana",
 ["GE"] = "Georgia",
 ["GD"] = "Grenada",
 ["GB"] = "United Kingdom",
 ["GA"] = "Gabon",
 ["SV"] = "El Salvador",
 ["GN"] = "Guinea",
 ["GM"] = "Gambia",
 ["GL"] = "Greenland",
 ["GI"] = "Gibraltar",
 ["GH"] = "Ghana",
 ["OM"] = "Oman",
 ["TN"] = "Tunisia",
 ["JO"] = "Jordan",
 ["HR"] = "Croatia",
 ["HT"] = "Haiti",
 ["HU"] = "Hungary",
 ["HK"] = "Hong Kong",
 ["HN"] = "Honduras",
 ["HM"] = "Heard Island and McDonald Islands",
 ["VE"] = "Venezuela",
 ["PR"] = "Puerto Rico",
 ["PS"] = "Palestinian Territory",
 ["PW"] = "Palau",
 ["PT"] = "Portugal",
 ["SJ"] = "Svalbard and Jan Mayen",
 ["PY"] = "Paraguay",
 ["IQ"] = "Iraq",
 ["PA"] = "Panama",
 ["PF"] = "French Polynesia",
 ["PG"] = "Papua New Guinea",
 ["PE"] = "Peru",
 ["PK"] = "Pakistan",
 ["PH"] = "Philippines",
 ["PN"] = "Pitcairn",
 ["PL"] = "Poland",
 ["PM"] = "Saint Pierre and Miquelon",
 ["ZM"] = "Zambia",
 ["EH"] = "Western Sahara",
 ["EE"] = "Estonia",
 ["EG"] = "Egypt",
 ["ZA"] = "South Africa",
 ["EC"] = "Ecuador",
 ["IT"] = "Italy",
 ["VN"] = "Vietnam",
 ["SB"] = "Solomon Islands",
 ["ET"] = "Ethiopia",
 ["SO"] = "Somalia",
 ["ZW"] = "Zimbabwe",
 ["SA"] = "Saudi Arabia",
 ["ES"] = "Spain",
 ["ER"] = "Eritrea",
 ["ME"] = "Montenegro",
 ["MD"] = "Moldova",
 ["MG"] = "Madagascar",
 ["MF"] = "Saint Martin",
 ["MA"] = "Morocco",
 ["MC"] = "Monaco",
 ["UZ"] = "Uzbekistan",
 ["MM"] = "Myanmar",
 ["ML"] = "Mali",
 ["MO"] = "Macao",
 ["MN"] = "Mongolia",
 ["MH"] = "Marshall Islands",
 ["MK"] = "Macedonia",
 ["MU"] = "Mauritius",
 ["MT"] = "Malta",
 ["MW"] = "Malawi",
 ["MV"] = "Maldives",
 ["MQ"] = "Martinique",
 ["MP"] = "Northern Mariana Islands",
 ["MS"] = "Montserrat",
 ["MR"] = "Mauritania",
 ["IM"] = "Isle of Man",
 ["UG"] = "Uganda",
 ["TZ"] = "Tanzania",
 ["MY"] = "Malaysia",
 ["MX"] = "Mexico",
 ["IL"] = "Israel",
 ["FR"] = "France",
 ["IO"] = "British Indian Ocean Territory",
 ["SH"] = "Saint Helena",
 ["FI"] = "Finland",
 ["FJ"] = "Fiji",
 ["FK"] = "Falkland Islands",
 ["FM"] = "Micronesia",
 ["FO"] = "Faroe Islands",
 ["NI"] = "Nicaragua",
 ["NL"] = "Netherlands",
 ["NO"] = "Norway",
 ["NA"] = "Namibia",
 ["VU"] = "Vanuatu",
 ["NC"] = "New Caledonia",
 ["NE"] = "Niger",
 ["NF"] = "Norfolk Island",
 ["NG"] = "Nigeria",
 ["NZ"] = "New Zealand",
 ["NP"] = "Nepal",
 ["NR"] = "Nauru",
 ["NU"] = "Niue",
 ["CK"] = "Cook Islands",
 ["XK"] = "Kosovo",
 ["CI"] = "Ivory Coast",
 ["CH"] = "Switzerland",
 ["CO"] = "Colombia",
 ["CN"] = "China",
 ["CM"] = "Cameroon",
 ["CL"] = "Chile",
 ["CC"] = "Cocos Islands",
 ["CA"] = "Canada",
 ["CG"] = "Republic of the Congo",
 ["CF"] = "Central African Republic",
 ["CD"] = "Democratic Republic of the Congo",
 ["CZ"] = "Czech Republic",
 ["CY"] = "Cyprus",
 ["CX"] = "Christmas Island",
 ["CR"] = "Costa Rica",
 ["CW"] = "Curacao",
 ["CV"] = "Cape Verde",
 ["CU"] = "Cuba",
 ["SZ"] = "Swaziland",
 ["SY"] = "Syria",
 ["SX"] = "Sint Maarten",
 ["KG"] = "Kyrgyzstan",
 ["KE"] = "Kenya",
 ["SS"] = "South Sudan",
 ["SR"] = "Suriname",
 ["KI"] = "Kiribati",
 ["KH"] = "Cambodia",
 ["KN"] = "Saint Kitts and Nevis",
 ["KM"] = "Comoros",
 ["ST"] = "Sao Tome and Principe",
 ["SK"] = "Slovakia",
 ["KR"] = "South Korea",
 ["SI"] = "Slovenia",
 ["KP"] = "North Korea",
 ["KW"] = "Kuwait",
 ["SN"] = "Senegal",
 ["SM"] = "San Marino",
 ["SL"] = "Sierra Leone",
 ["SC"] = "Seychelles",
 ["KZ"] = "Kazakhstan",
 ["KY"] = "Cayman Islands",
 ["SG"] = "Singapore",
 ["SE"] = "Sweden",
 ["SD"] = "Sudan",
 ["DO"] = "Dominican Republic",
 ["DM"] = "Dominica",
 ["DJ"] = "Djibouti",
 ["DK"] = "Denmark",
 ["VG"] = "British Virgin Islands",
 ["DE"] = "Germany",
 ["YE"] = "Yemen",
 ["DZ"] = "Algeria",
 ["US"] = "United States",
 ["UY"] = "Uruguay",
 ["YT"] = "Mayotte",
 ["UM"] = "United States Minor Outlying Islands",
 ["LB"] = "Lebanon",
 ["LC"] = "Saint Lucia",
 ["LA"] = "Laos",
 ["TV"] = "Tuvalu",
 ["TW"] = "Taiwan",
 ["TT"] = "Trinidad and Tobago",
 ["TR"] = "Turkey",
 ["LK"] = "Sri Lanka",
 ["LI"] = "Liechtenstein",
 ["LV"] = "Latvia",
 ["TO"] = "Tonga",
 ["LT"] = "Lithuania",
 ["LU"] = "Luxembourg",
 ["LR"] = "Liberia",
 ["LS"] = "Lesotho",
 ["TH"] = "Thailand",
 ["TF"] = "French Southern Territories",
 ["TG"] = "Togo",
 ["TD"] = "Chad",
 ["TC"] = "Turks and Caicos Islands",
 ["LY"] = "Libya",
 ["VA"] = "Vatican",
 ["VC"] = "Saint Vincent and the Grenadines",
 ["AE"] = "United Arab Emirates",
 ["AD"] = "Andorra",
 ["AG"] = "Antigua and Barbuda",
 ["AF"] = "Afghanistan",
 ["AI"] = "Anguilla",
 ["VI"] = "U.S. Virgin Islands",
 ["IS"] = "Iceland",
 ["IR"] = "Iran",
 ["AM"] = "Armenia",
 ["AL"] = "Albania",
 ["AO"] = "Angola",
 ["AQ"] = "Antarctica",
 ["AS"] = "American Samoa",
 ["AR"] = "Argentina",
 ["AU"] = "Australia",
 ["AT"] = "Austria",
 ["AW"] = "Aruba",
 ["IN"] = "India",
 ["AX"] = "Aland Islands",
 ["AZ"] = "Azerbaijan",
 ["IE"] = "Ireland",
 ["ID"] = "Indonesia",
 ["UA"] = "Ukraine",
 ["QA"] = "Qatar",
 ["MZ"] = "Mozambique"
}


local success, countryCode = pcall(function()
    return LocalizationS:GetCountryRegionForPlayerAsync(Player)
end)

if success then
    local country = countryMap[countryCode] or "a safe country"
    example("FUCK, Im from " .. country .. "!")
else
    print("Failed to retrieve the player's country/region: " .. tostring(countryCode))
end
example("The Fuck You Mean? ðŸ’€")
example("Nigga What The Fuck You Mean")





chat.Size = UDim2.new(0.3, 0, 0.2, 0)
chat.Position = UDim2.new(0.35, 0, 0.7, 0)
chat.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
chat.BorderColor3 = Color3.fromRGB(70, 70, 70)
chat.BorderSizePixel = 1
chat.Text = "Chat"
chat.TextSize = 18
chat.TextColor3 = Color3.new(1, 1, 1)
chat.Font = Enum.Font.Code
chat.Parent = GazerMain


UICornerChat.CornerRadius = UDim.new(0, 10)
UICornerChat.Parent = chat


local function createButtonTween(button)
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local goal = {BackgroundColor3 = Color3.fromRGB(100, 100, 100)} -- Change color when clicked

    local tween = TweenService:Create(button, tweenInfo, goal)
    return tween
end

local function isEmoji(c)
    local code = utf8.codepoint(c)  

    
    if (code >= 0x1F600 and code <= 0x1F64F) or  
       (code >= 0x1F300 and code <= 0x1F5FF) or  
       (code >= 0x1F680 and code <= 0x1F6FF) or  
       (code >= 0x1F700 and code <= 0x1F77F) or  
       (code >= 0x1F900 and code <= 0x1F9FF) or  
       (code >= 0x2600 and code <= 0x26FF) or    
       (code >= 0x2700 and code <= 0x27BF) or    
       (code >= 0x1F1E6 and code <= 0x1F1FF) then 
        return true  
    end
    return false  
end




local function modifyText(input)

    
    -- Split the string into words
    local words = {}
    for word in string.gmatch(input, "%S+") do
        table.insert(words, word)
    end

    -- Check if the first word is exactly "hola" (case insensitive)
    if words[1] then
        local firstWord = words[1]:lower()

        if firstWord == "fuck" or 
           firstWord == "ass" or 
           firstWord == "i" or 
           firstWord == "nigga" then
            words[1] = "[a] " .. words[1]
        elseif firstWord == "porn" then
            words[1] = "e " .. words[1]
        end
        end 
        
        input = table.concat(words, " ")
    


local replacements = {
        sex = "sâ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢xâ€¢",
        Sex = "Sâ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢x",
        SEX = "Sâ€¢â€¢â€¢â€¢â€¢â€¢Eâ€¢X",
        ass = "â€¢aâ€¢â€¢â€¢â€¢â€¢â€¢sâ€¢sâ€¢",
        Ass = "â€¢Aâ€¢â€¢â€¢â€¢â€¢â€¢sâ€¢sâ€¢",
        ASS = "â€¢Aâ€¢â€¢â€¢â€¢â€¢â€¢Sâ€¢Sâ€¢",
        fuck = "fâ€¢â€¢â€¢â€¢â€¢â€¢uâ€¢câ€¢kâ€¢",
        Fuck = "Fâ€¢â€¢â€¢â€¢â€¢â€¢uâ€¢câ€¢kâ€¢",
        FUCK = "Fâ€¢â€¢â€¢â€¢â€¢â€¢Uâ€¢Câ€¢Kâ€¢",
        damn = "â€¢dâ€¢â€¢â€¢â€¢â€¢â€¢aâ€¢â€¢mâ€¢â€¢nâ€¢",
        Damn = "â€¢Dâ€¢â€¢â€¢â€¢â€¢â€¢aâ€¢â€¢mâ€¢â€¢nâ€¢",
        DAMN = "â€¢Dâ€¢â€¢â€¢â€¢â€¢â€¢Aâ€¢â€¢Mâ€¢â€¢Nâ€¢",
        shit = "â€¢sâ€¢â€¢â€¢â€¢â€¢â€¢hâ€¢iâ€¢tâ€¢",
        Shit = "â€¢Sâ€¢â€¢â€¢â€¢â€¢â€¢hâ€¢iâ€¢tâ€¢",
        SHIT = "â€¢Sâ€¢â€¢â€¢â€¢â€¢â€¢Hâ€¢Iâ€¢Tâ€¢",
        pornhub = "â€¢pâ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢râ€¢nâ€¢â€¢â€¢hâ€¢â€¢â€¢ubâ€¢",
        Pornhub = "â€¢Pâ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢râ€¢nâ€¢â€¢â€¢hâ€¢â€¢â€¢ubâ€¢",
        porn = "â€¢pâ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢râ€¢nâ€¢",
        Porn = "â€¢Pâ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢râ€¢nâ€¢",
        PORN = "â€¢Pâ€¢â€¢â€¢â€¢â€¢â€¢Oâ€¢Râ€¢Nâ€¢",
        bitch = "â€¢bâ€¢iâ€¢tâ€¢â€¢â€¢câ€¢hâ€¢",
        Bitch = "â€¢Bâ€¢iâ€¢tâ€¢â€¢â€¢câ€¢hâ€¢",
        BITCH = "â€¢Bâ€¢Iâ€¢Tâ€¢â€¢â€¢Câ€¢Hâ€¢",
        niggas = "á¹‡â€¢á»‹â€¢gâ€¢â€¢â€¢gâ€¢aâ€¢s\bâ€¢n",
        niggers = "á¹‡â€¢á»‹â€¢gâ€¢â€¢â€¢gâ€¢eâ€¢râ€¢s\bâ€¢nâ€¢",
        Niggers = "á¹†â€¢á»‹â€¢gâ€¢â€¢â€¢gâ€¢eâ€¢râ€¢s\bâ€¢nâ€¢",
        Niggas = "á¹†â€¢á»‹â€¢gâ€¢â€¢â€¢gâ€¢aâ€¢s\bâ€¢n",
        NIGGERS = "á¹†â€¢á»Šâ€¢Ä¢â€¢â€¢â€¢Ä¢â€¢Eâ€¢Râ€¢S\bâ€¢Nâ€¢",
        nigga = "á¹‡â€¢á»‹â€¢gâ€¢â€¢â€¢gâ€¢a",
        nigger = "á¹‡â€¢á»‹â€¢gâ€¢â€¢â€¢gâ€¢eâ€¢r\bâ€¢nâ€¢",
        Nigga = "á¹†â€¢á»‹â€¢gâ€¢â€¢â€¢gâ€¢a",
        Nigger = "á¹†â€¢á»‹â€¢gâ€¢â€¢â€¢gâ€¢eâ€¢r\bâ€¢nâ€¢",
        NIGGER = "á¹†â€¢á»Šâ€¢Ä¢â€¢â€¢â€¢Ä¢â€¢Eâ€¢R\bâ€¢Nâ€¢",
        NIGGAS = "á¹†â€¢á»Šâ€¢Ä¢â€¢â€¢â€¢Ä¢â€¢Aâ€¢S\bâ€¢Nâ€¢",
        NIGGA = "á¹†â€¢á»Šâ€¢Ä¢â€¢â€¢â€¢Ä¢â€¢A\bâ€¢Nâ€¢",
        dick = "â€¢dâ€¢iâ€¢â€¢câ€¢kâ€¢",
        gay = "gâ€¢â€¢â€¢â€¢â€¢â€¢aâ€¢y",
        Gay = "Ä¢â€¢â€¢â€¢â€¢â€¢â€¢aâ€¢y",
        GAY = "Ä¢â€¢â€¢â€¢â€¢â€¢â€¢Aâ€¢Y",
        pussy = "â€¢pâ€¢uâ€¢sâ€¢sâ€¢â€¢â€¢â€¢â€¢â€¢yâ€¢",
        Pussy = "â€¢Pâ€¢uâ€¢sâ€¢sâ€¢â€¢â€¢â€¢â€¢â€¢yâ€¢",
        PUSSY = "â€¢Pâ€¢Uâ€¢Sâ€¢Sâ€¢â€¢â€¢â€¢â€¢â€¢Yâ€¢",
        breast = "â€¢bâ€¢râ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢aâ€¢sâ€¢tâ€¢",
        Breast = "â€¢Bâ€¢râ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢aâ€¢sâ€¢tâ€¢",
        BREAST ="â€¢Bâ€¢Râ€¢â€¢â€¢â€¢â€¢â€¢Eâ€¢Aâ€¢Sâ€¢Tâ€¢",
        whore = "wâ€¢â€¢â€¢â€¢â€¢â€¢hâ€¢oâ€¢râ€¢eâ€¢",
    Whore = "Wâ€¢â€¢â€¢â€¢â€¢â€¢hâ€¢oâ€¢râ€¢eâ€¢",
    WHORE = "Wâ€¢â€¢â€¢â€¢â€¢â€¢Hâ€¢Oâ€¢Râ€¢Eâ€¢",
    slut = "sâ€¢â€¢â€¢â€¢â€¢â€¢lâ€¢uâ€¢tâ€¢",
    Slut = "Sâ€¢â€¢â€¢â€¢â€¢â€¢lâ€¢uâ€¢tâ€¢",
    SLUT = "Sâ€¢â€¢â€¢â€¢â€¢â€¢Lâ€¢Uâ€¢Tâ€¢",
    bastard = "bâ€¢â€¢â€¢â€¢â€¢â€¢aâ€¢sâ€¢tâ€¢aâ€¢râ€¢dâ€¢",
    Bastard = "Bâ€¢â€¢â€¢â€¢â€¢â€¢aâ€¢sâ€¢tâ€¢aâ€¢râ€¢dâ€¢",
    BASTARD = "Bâ€¢â€¢â€¢â€¢â€¢â€¢Aâ€¢Sâ€¢Tâ€¢Aâ€¢Râ€¢Dâ€¢",
    hoe = "hâ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢eâ€¢",
    Hoe = "Hâ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢eâ€¢",
    HOE = "Hâ€¢â€¢â€¢â€¢â€¢â€¢Oâ€¢Eâ€¢",
    cunt = "câ€¢â€¢â€¢â€¢â€¢â€¢uâ€¢nâ€¢tâ€¢",
    Cunt = "Câ€¢â€¢â€¢â€¢â€¢â€¢uâ€¢nâ€¢tâ€¢",
    CUNT = "Câ€¢â€¢â€¢â€¢â€¢â€¢Uâ€¢Nâ€¢Tâ€¢",
    fag = "fâ€¢â€¢â€¢â€¢â€¢â€¢aâ€¢gâ€¢",
    Fag = "Fâ€¢â€¢â€¢â€¢â€¢â€¢aâ€¢gâ€¢",
    FAG = "Fâ€¢â€¢â€¢â€¢â€¢â€¢Aâ€¢Gâ€¢",
    faggot = "fâ€¢â€¢â€¢â€¢â€¢â€¢aâ€¢gâ€¢gâ€¢oâ€¢tâ€¢",
    Faggot = "Fâ€¢â€¢â€¢â€¢â€¢â€¢aâ€¢gâ€¢gâ€¢oâ€¢tâ€¢",
    FAGGOT = "Fâ€¢â€¢â€¢â€¢â€¢â€¢Aâ€¢Gâ€¢Gâ€¢Oâ€¢Tâ€¢",
    hoe = "hâ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢eâ€¢",
    Hoe = "Hâ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢eâ€¢",
    HOE = "Hâ€¢â€¢â€¢â€¢â€¢â€¢Oâ€¢Eâ€¢",
    piss = "pâ€¢â€¢â€¢â€¢â€¢â€¢iâ€¢sâ€¢sâ€¢",
    Piss = "Pâ€¢â€¢â€¢â€¢â€¢â€¢iâ€¢sâ€¢sâ€¢",
    PISS = "Pâ€¢â€¢â€¢â€¢â€¢â€¢Iâ€¢Sâ€¢Sâ€¢",
    rape = "râ€¢â€¢â€¢â€¢â€¢â€¢aâ€¢pâ€¢eâ€¢",
    Rape = "Râ€¢â€¢â€¢â€¢â€¢â€¢aâ€¢pâ€¢eâ€¢",
    RAPE = "Râ€¢â€¢â€¢â€¢â€¢â€¢Aâ€¢Pâ€¢Eâ€¢",
    weed = "wâ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢eâ€¢dâ€¢",
    Weed = "Wâ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢eâ€¢dâ€¢",
    WEED = "Wâ€¢â€¢â€¢â€¢â€¢â€¢Eâ€¢Eâ€¢Dâ€¢",
    meth = "mâ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢tâ€¢hâ€¢",
    Meth = "Mâ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢tâ€¢hâ€¢",
    METH = "Mâ€¢â€¢â€¢â€¢â€¢â€¢Eâ€¢Tâ€¢Hâ€¢",
    heroin = "hâ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢râ€¢oâ€¢iâ€¢nâ€¢",
    Heroin = "Hâ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢râ€¢oâ€¢iâ€¢nâ€¢",
    HEROIN = "Hâ€¢â€¢â€¢â€¢â€¢â€¢Eâ€¢Râ€¢Oâ€¢Iâ€¢Nâ€¢",
    cocaine = "câ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢câ€¢aâ€¢iâ€¢nâ€¢eâ€¢",
    Cocaine = "Câ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢câ€¢aâ€¢iâ€¢nâ€¢eâ€¢",
    COCAINE = "Câ€¢â€¢â€¢â€¢â€¢â€¢Oâ€¢Câ€¢Aâ€¢Iâ€¢Nâ€¢Eâ€¢",
    ecstasy = "eâ€¢â€¢â€¢â€¢â€¢â€¢câ€¢sâ€¢tâ€¢aâ€¢sâ€¢yâ€¢",
    Ecstasy = "Eâ€¢â€¢â€¢â€¢â€¢â€¢câ€¢sâ€¢tâ€¢aâ€¢sâ€¢yâ€¢",
    ECSTASY = "Eâ€¢â€¢â€¢â€¢â€¢â€¢Câ€¢Sâ€¢Tâ€¢Aâ€¢Sâ€¢Yâ€¢",
    lsd = "lâ€¢â€¢â€¢â€¢â€¢â€¢sâ€¢dâ€¢",
    LSD = "Lâ€¢â€¢â€¢â€¢â€¢â€¢Sâ€¢Dâ€¢",
    ketamine = "kâ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢tâ€¢aâ€¢mâ€¢iâ€¢nâ€¢eâ€¢",
    Ketamine = "Kâ€¢â€¢â€¢â€¢â€¢â€¢eâ€¢tâ€¢aâ€¢mâ€¢iâ€¢nâ€¢eâ€¢",
    KETAMINE = "Kâ€¢â€¢â€¢â€¢â€¢â€¢Eâ€¢Tâ€¢Aâ€¢Mâ€¢Iâ€¢Nâ€¢Eâ€¢",
    crack = "câ€¢â€¢â€¢â€¢â€¢â€¢râ€¢aâ€¢câ€¢kâ€¢",
    Crack = "Câ€¢â€¢â€¢â€¢â€¢â€¢râ€¢aâ€¢câ€¢kâ€¢",
    CRACK = "Câ€¢â€¢â€¢â€¢â€¢â€¢Râ€¢Aâ€¢Câ€¢Kâ€¢",
    molly = "mâ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢lâ€¢lâ€¢yâ€¢",
    Molly = "Mâ€¢â€¢â€¢â€¢â€¢â€¢oâ€¢lâ€¢lâ€¢yâ€¢",
    MOLLY = "Mâ€¢â€¢â€¢â€¢â€¢â€¢Oâ€¢Lâ€¢Lâ€¢Yâ€¢",
    ["0"] = "\xEF\xBC\x90â€¢",
    ["1"] = "\xEF\xBC\x91â€¢",
    ["2"] = "\xEF\xBC\x92â€¢",  
    ["3"] = "\xEF\xBC\x93â€¢",  
    ["4"] = "\xEF\xBC\x94â€¢",  
    ["5"] = "\xEF\xBC\x95â€¢",  
    ["6"] = "\xEF\xBC\x96â€¢", 
    ["7"] = "\xEF\xBC\x97â€¢", 
    ["8"] = "\xEF\xBC\x98â€¢",  
    ["9"] = "\xEF\xBC\x99â€¢"
}

    local lowerInput = input

    
    for word, replacement in pairs(replacements) do
        lowerInput = lowerInput:gsub("(%s?)(" .. word .. ")(%s?)", function(before, matched, after)
            local modifiedReplacement = replacement
            if before ~= "" then
                modifiedReplacement = modifiedReplacement
            end
            if after ~= "" then
                modifiedReplacement = modifiedReplacement
            end
            return before .. "{" .. modifiedReplacement .. "}" .. after
        end)
    end

    
    local emojiPattern = "[%z\1-\127\194-\244][\128-\191]*"
    local modifiedInput = lowerInput:gsub(emojiPattern, function(c)
        if isEmoji(c) then
            return "{" .. c .. "}"
        end
        return c
    end)

    
    local result = ""
    local insideReplacedWord = false

    for i = 1, #modifiedInput do
        local char = modifiedInput:sub(i, i)

        if char == "{" then
            insideReplacedWord = true
        elseif char == "}" then
            insideReplacedWord = false
        elseif insideReplacedWord then
            result = result .. char
        elseif char == " " then
        result = result .. "\b"
    
        else
            result = result .. char
            
            if i < #modifiedInput and modifiedInput:sub(i + 1, i + 1) ~= " " then
                result = result .. "â€¢"
            end
        end
    end

    
    result = result:gsub("{", ""):gsub("}", "")
    result = result:gsub("â€¢", "\xEF\xBF\xB8")
    result = result:gsub("|", "\r")
    

    
    local A_1 = result
    local A_2 = "All"

    if game:GetService("TextChatService"):FindFirstChild("TextChannels") then
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync( "<â€¢>\r\v" .. A_1 .. "\v\t")
    else
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("</>\b" .. A_1, A_2)
    end
end
    

    
    
    


chat.MouseButton1Click:Connect(function()
    local inputString = TextBax.Text
    modifyText(inputString)

    
    local tween = createButtonTween(chat)
    tween:Play()

    
    tween.Completed:Connect(function()
        chat.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Reset to original color
    end)
end)
